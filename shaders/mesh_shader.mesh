#version 450
#extension GL_EXT_mesh_shader : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types: require

struct Tri {
	u8vec4 indices;
};

#define MESHLET_SIZE 64

struct Meshlet {
	u8vec4 pos[MESHLET_SIZE];
	Tri tri_indices[MESHLET_SIZE];
	u8vec4 prim_colors[MESHLET_SIZE];
	int vert_count;
	int prim_count;
};

layout(scalar, buffer_reference) buffer MeshBuffer {
	Meshlet[] meshlets;
};

layout(scalar, push_constant) uniform T {
	mat4 matrix;
    ivec3 chunk_position;
    float time;
    MeshBuffer mesh_buffer;
	uint num_verts;
} push_constants;

layout(local_size_x = MESHLET_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MESHLET_SIZE, max_primitives = MESHLET_SIZE) out;

// layout(location = 0) out VertexOutput
// {
// 	vec4 color;
// } vertexOutput[];

const vec4[6] colors = {
	vec4(0.0, 1.0, 0.0, 1.0),	// top
	vec4(1.0, 0.0, 0.0, 1.0),	// north
	vec4(0.0, 0.0, 1.0, 1.0),	// west
	vec4(1.0, 0.0, 1.0, 1.0), 	// east
	vec4(0.0, 1.0, 1.0, 1.0), 	// south
	vec4(1.0, 1.0, 0.0, 1.0) 	// bottom
};

layout(location = 0) perprimitiveEXT out PrimitiveOutput {
	vec4 color;
} primitiveOutput[];

struct Task {
	uint offset;
	uint numWorkgroups;
};

taskPayloadSharedEXT Task payload;

void main() {
	int verticesOut = push_constants.mesh_buffer.meshlets[gl_WorkGroupID.x].vert_count;
	int primitivesOut = push_constants.mesh_buffer.meshlets[gl_WorkGroupID.x].prim_count;
	SetMeshOutputsEXT(verticesOut, primitivesOut);
	//SetMeshOutputsEXT(32, 32);

	mat4 mvp = push_constants.matrix;

	//Meshlet meshlet = push_constants.mesh_buffer.meshlets[gl_WorkGroupID.x];
	vec3 chunk_offset = vec3(push_constants.chunk_position * 16);
	Tri tri = push_constants.mesh_buffer.meshlets[gl_WorkGroupID.x].tri_indices[gl_LocalInvocationID.x];
	vec3 color = push_constants.mesh_buffer.meshlets[gl_WorkGroupID.x].prim_colors[gl_LocalInvocationID.x].xyz / vec3(255.0);

	gl_MeshVerticesEXT[gl_LocalInvocationID.x].gl_Position = mvp * vec4(push_constants.mesh_buffer.meshlets[gl_WorkGroupID.x].pos[gl_LocalInvocationID.x].xyz + chunk_offset, 1);

	if(tri.indices.x != tri.indices.y) {
		gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationID.x] = uvec3(tri.indices.xyz);
	    primitiveOutput[gl_LocalInvocationID.x].color = vec4(color, 1.0);
	}
}
